options(scipen=999) # force full notation not scientific
library(tidyverse)
library(here)
library(ggplot2)
library(patchwork)
path_100 <- here("data", "adjacent_df_200m_forpermutation.tsv")
path_200 <- here("data", "adjacent_df_200m_forpermutation.tsv")
path_500 <- here("data", "adjacent_df_500m_forpermutation.tsv")
path_1000 <- here("data", "adjacent_df_1000m_forpermutation.tsv")
path_2000 <- here("data", "adjacent_df_2000m_forpermutation.tsv")
path_3000 <- here("data", "adjacent_df_3000m_forpermutation.tsv")
path_4000 <- here("data", "adjacent_df_4000m_forpermutation.tsv")
path_5000 <- here("data", "adjacent_df_5000m_forpermutation.tsv")
get.prop.diff <- function(x){
in_buffer <- sum(x$MINORPOP_intersect_count) / sum(x$ACSTOTPOP_intersect_count)
out_buffer <- sum(x$out_mnr_count) / sum(x$out_pop_count)
return(in_buffer - out_buffer)
}
permutation_test <- function(path, buffer_size){
df <- read_tsv(path)
# df <- na.omit(df[, c("MINORPOP_intersect_count", "ACSTOTPOP_intersect_count",
#                      "out_mnr_count", "out_pop_count")])
actual.value <- get.prop.diff(df)
n.sim <- 2000
results <- tibble(statistic = c(actual.value,
rep(NA,n.sim)))
new.df <- df %>%
select(ACSTOTPOP, MINORPOP,
MINORPOP_intersect_count, ACSTOTPOP_intersect_count,
out_mnr_count, out_pop_count, intersect_prop)
set.seed(42)
for(i in 2:nrow(results)){
new.df$intersect_prop <- sample(new.df$intersect_prop)
# create new counts variables based on the sampled proportion
new.df$ACSTOTPOP_intersect_count <- new.df$intersect_prop*new.df$ACSTOTPOP
new.df$MINORPOP_intersect_count <- new.df$intersect_prop*new.df$MINORPOP
new.df$out_pop_count <- new.df$ACSTOTPOP - new.df$ACSTOTPOP_intersect_count
new.df$out_mnr_count <- new.df$MINORPOP - new.df$MINORPOP_intersect_count
# Calc result statistic
results$statistic[i] <- get.prop.diff(new.df)
}
this_sd <- sd(results$statistic)
max_density <- max(results$statistic, na.rm = TRUE)
pval <- mean(results$statistic > actual.value)
pval_label <- paste0("p-value:\n", round(pval, 3))
act_label <- paste0("act. value:\n", round(actual.value, 3))
plot <- ggplot(results, aes(x=statistic)) +
geom_density() +
geom_vline(xintercept=actual.value,color="red") +
#annotate("text", x=-.1, y=35, label=pval_label, color="red", size=3) + # add the label
#annotate("text", x=.12, y=35, label=act_label, color="red", size=3) + # add the label
#ylim(0, 50) +  # set y limits
xlim(-.3,.3)+
theme_minimal() +
labs(x=NULL, y=paste0(buffer_size,"m"))  # remove x label and add y label
return(plot)
}
permutation_test_multi <- function(paths, buffer_sizes){
plots <- list()
for (i in seq_along(paths)){
plots[[i]] <- permutation_test(paths[i], buffer_sizes[i])
}
# combine the plots using patchwork
plot_combined <- wrap_plots(plots) +
plot_layout(ncol = 1) +
plot_annotation(title = "Density Plots for Multiple Flare Buffers")
return(plot_combined)
}
buffer_sizes <- c(100,200, 500, 1000, 2000, 3000, 4000, 5000)
buffer_sizes <- sort(buffer_sizes, decreasing = TRUE)
paths <- sort(c(path_5000, path_4000, path_3000, path_2000, path_1000, path_500, path_200, path_100), decreasing = TRUE)
permutation_test_multi(paths, buffer_sizes)
options(scipen=999) # force full notation not scientific
library(tidyverse)
library(here)
library(ggplot2)
library(patchwork)
path_100 <- here("data", "adjacent_df_200m_forpermutation.tsv")
path_200 <- here("data", "adjacent_df_200m_forpermutation.tsv")
path_500 <- here("data", "adjacent_df_500m_forpermutation.tsv")
path_1000 <- here("data", "adjacent_df_1000m_forpermutation.tsv")
path_2000 <- here("data", "adjacent_df_2000m_forpermutation.tsv")
path_3000 <- here("data", "adjacent_df_3000m_forpermutation.tsv")
path_4000 <- here("data", "adjacent_df_4000m_forpermutation.tsv")
path_5000 <- here("data", "adjacent_df_5000m_forpermutation.tsv")
get.prop.diff <- function(x){
in_buffer <- sum(x$MINORPOP_intersect_count) / sum(x$ACSTOTPOP_intersect_count)
out_buffer <- sum(x$out_mnr_count) / sum(x$out_pop_count)
return(in_buffer - out_buffer)
}
permutation_test <- function(path, buffer_size){
df <- read_tsv(path)
# df <- na.omit(df[, c("MINORPOP_intersect_count", "ACSTOTPOP_intersect_count",
#                      "out_mnr_count", "out_pop_count")])
actual.value <- get.prop.diff(df)
n.sim <- 2000
results <- tibble(statistic = c(actual.value,
rep(NA,n.sim)))
new.df <- df %>%
select(ACSTOTPOP, MINORPOP,
MINORPOP_intersect_count, ACSTOTPOP_intersect_count,
out_mnr_count, out_pop_count, intersect_prop)
set.seed(42)
for(i in 2:nrow(results)){
new.df$intersect_prop <- sample(new.df$intersect_prop)
# create new counts variables based on the sampled proportion
new.df$ACSTOTPOP_intersect_count <- new.df$intersect_prop*new.df$ACSTOTPOP
new.df$MINORPOP_intersect_count <- new.df$intersect_prop*new.df$MINORPOP
new.df$out_pop_count <- new.df$ACSTOTPOP - new.df$ACSTOTPOP_intersect_count
new.df$out_mnr_count <- new.df$MINORPOP - new.df$MINORPOP_intersect_count
# Calc result statistic
results$statistic[i] <- get.prop.diff(new.df)
}
this_sd <- sd(results$statistic)
max_density <- max(results$statistic, na.rm = TRUE)
pval <- mean(results$statistic > actual.value)
pval_label <- paste0("p-value:\n", round(pval, 3))
act_label <- paste0("act. value:\n", round(actual.value, 3))
plot <- ggplot(results, aes(x=statistic)) +
geom_density() +
geom_vline(xintercept=actual.value,color="red") +
#annotate("text", x=-.1, y=35, label=pval_label, color="red", size=3) + # add the label
#annotate("text", x=.12, y=35, label=act_label, color="red", size=3) + # add the label
#ylim(0, 50) +  # set y limits
xlim(-.3,.3)+
theme_minimal() +
labs(x=NULL, y=paste0(buffer_size,"m"))  # remove x label and add y label
return(plot)
}
permutation_test_multi <- function(paths, buffer_sizes){
plots <- list()
for (i in seq_along(paths)){
plots[[i]] <- permutation_test(paths[i], buffer_sizes[i])
}
# combine the plots using patchwork
plot_combined <- wrap_plots(plots) +
plot_layout(ncol = 1) +
plot_annotation(title = "Density Plots for Multiple Flare Buffers")
return(plot_combined)
}
buffer_sizes <- c(100,200, 500, 1000, 2000, 3000, 4000, 5000)
buffer_sizes <- sort(buffer_sizes, decreasing = TRUE)
paths <- sort(c(path_5000, path_4000, path_3000, path_2000,
path_1000, path_500, path_200, path_100), decreasing = TRUE)
permutation_test_multi(paths, buffer_sizes)
options(scipen=999) # force full notation not scientific
library(tidyverse)
library(here)
library(ggplot2)
library(patchwork)
path_100 <- here("data", "adjacent_df_200m_forpermutation.tsv")
path_200 <- here("data", "adjacent_df_200m_forpermutation.tsv")
path_500 <- here("data", "adjacent_df_500m_forpermutation.tsv")
path_1000 <- here("data", "adjacent_df_1000m_forpermutation.tsv")
path_2000 <- here("data", "adjacent_df_2000m_forpermutation.tsv")
path_3000 <- here("data", "adjacent_df_3000m_forpermutation.tsv")
path_4000 <- here("data", "adjacent_df_4000m_forpermutation.tsv")
path_5000 <- here("data", "adjacent_df_5000m_forpermutation.tsv")
get.prop.diff <- function(x){
in_buffer <- sum(x$MINORPOP_intersect_count) / sum(x$ACSTOTPOP_intersect_count)
out_buffer <- sum(x$out_mnr_count) / sum(x$out_pop_count)
return(in_buffer - out_buffer)
}
permutation_test <- function(path, buffer_size){
df <- read_tsv(path)
# df <- na.omit(df[, c("MINORPOP_intersect_count", "ACSTOTPOP_intersect_count",
#                      "out_mnr_count", "out_pop_count")])
actual.value <- get.prop.diff(df)
n.sim <- 2000
results <- tibble(statistic = c(actual.value,
rep(NA,n.sim)))
new.df <- df %>%
select(ACSTOTPOP, MINORPOP,
MINORPOP_intersect_count, ACSTOTPOP_intersect_count,
out_mnr_count, out_pop_count, intersect_prop)
set.seed(42)
for(i in 2:nrow(results)){
new.df$intersect_prop <- sample(new.df$intersect_prop)
# create new counts variables based on the sampled proportion
new.df$ACSTOTPOP_intersect_count <- new.df$intersect_prop*new.df$ACSTOTPOP
new.df$MINORPOP_intersect_count <- new.df$intersect_prop*new.df$MINORPOP
new.df$out_pop_count <- new.df$ACSTOTPOP - new.df$ACSTOTPOP_intersect_count
new.df$out_mnr_count <- new.df$MINORPOP - new.df$MINORPOP_intersect_count
# Calc result statistic
results$statistic[i] <- get.prop.diff(new.df)
}
this_sd <- sd(results$statistic)
max_density <- max(results$statistic, na.rm = TRUE)
pval <- mean(results$statistic > actual.value)
pval_label <- paste0("p-value:\n", round(pval, 3))
act_label <- paste0("act. value:\n", round(actual.value, 3))
plot <- ggplot(results, aes(x=statistic)) +
geom_density() +
geom_vline(xintercept=actual.value,color="red") +
#annotate("text", x=-.1, y=35, label=pval_label, color="red", size=3) + # add the label
#annotate("text", x=.12, y=35, label=act_label, color="red", size=3) + # add the label
#ylim(0, 50) +  # set y limits
xlim(-.3,.3)+
theme_minimal() +
labs(x=NULL, y=paste0(buffer_size,"m"))  # remove x label and add y label
return(plot)
}
permutation_test_multi <- function(paths, buffer_sizes){
plots <- list()
for (i in seq_along(paths)){
plots[[i]] <- permutation_test(paths[i], buffer_sizes[i])
}
# combine the plots using patchwork
plot_combined <- wrap_plots(plots) +
plot_layout(ncol = 1) +
plot_annotation(title = "Density Plots for Multiple Flare Buffers")
return(plot_combined)
}
buffer_sizes <- c(100,200, 500, 1000, 2000, 3000, 4000, 5000)
buffer_sizes <- sort(buffer_sizes, decreasing = TRUE)
paths <- sort(c(path_5000, path_4000, path_3000, path_2000,
path_1000, path_500, path_200, path_100), decreasing = TRUE)
permutation_test_multi(paths, buffer_sizes)
permutation_test(path_500, 500)
permutation_test(path_200, 200)
permutation_test(path_200, 200)
options(scipen=999) # force full notation not scientific
library(tidyverse)
library(here)
library(ggplot2)
library(patchwork)
path_100 <- here("data", "adjacent_df_200m_forpermutation.tsv")
path_200 <- here("data", "adjacent_df_200m_forpermutation.tsv")
path_500 <- here("data", "adjacent_df_500m_forpermutation.tsv")
path_1000 <- here("data", "adjacent_df_1000m_forpermutation.tsv")
path_2000 <- here("data", "adjacent_df_2000m_forpermutation.tsv")
path_3000 <- here("data", "adjacent_df_3000m_forpermutation.tsv")
path_4000 <- here("data", "adjacent_df_4000m_forpermutation.tsv")
path_5000 <- here("data", "adjacent_df_5000m_forpermutation.tsv")
# count the number of missing values in each variable
missing_count <- colSums(is.na(path_200))
# count the number of missing values in each variable
df <- read_tsv(path_200)
missing_count <- colSums(is.na(df))
# create bar plot of missing values
ggplot(data = data.frame(variable = names(missing_count), missing_count),
aes(x = variable, y = missing_count)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Number of missing values by variable",
x = "Variable", y = "Number of missing values")
missing_count
# count the number of missing values in each variable
df <- read_tsv(path_100)
missing_count <- colSums(is.na(df))
missing_count
# count the number of missing values in each variable
df <- read_tsv(path_500)
missing_count <- colSums(is.na(df))
missing_count
# count the number of missing values in each variable
df <- read_tsv(path_1000)
missing_count <- colSums(is.na(df))
missing_count
# count the number of missing values in each variable
df <- read_tsv(path_2000)
missing_count <- colSums(is.na(df))
missing_count
# count the number of missing values in each variable
df <- read_tsv(path_3000)
missing_count <- colSums(is.na(df))
missing_count
# count the number of missing values in each variable
df <- read_tsv(path_4000)
missing_count <- colSums(is.na(df))
missing_count
# count the number of missing values in each variable
df <- read_tsv(path_200)
missing_count <- colSums(is.na(df))
missing_count
permutation_test(path_200, 200)
permutation_test(path_100, 100)
permutation_test(path_500, 500)
permutation_test(path_1000, 1000)
permutation_test(path_2000, 2000)
permutation_test(path_3000, 3000)
permutation_test(path_4000, 4000)
permutation_test(path_3000, 3000)
permutation_test(path_4000, 4000)
permutation_test(path_5000, 5000)
permutation_test_multi(paths, buffer_sizes)
df <- read_tsv(path_100)
get.prop.diff(df)
df <- read_tsv(path_200)
get.prop.diff(df)
df <- read_tsv(path_500)
get.prop.diff(df)
df <- read_tsv(path_1000)
get.prop.diff(df)
permutation_test(path_200, 200)
df <- read_tsv(path_2000)
get.prop.diff(df)
df <- read_tsv(path_3000)
get.prop.diff(df)
df <- read_tsv(path_4000)
get.prop.diff(df)
df <- read_tsv(path_5000)
get.prop.diff(df)
permutation_test(path_5000, 5000)
buffer_sizes <- c(100,200, 500, 1000, 2000, 3000, 4000, 5000)
buffer_sizes <- sort(buffer_sizes, decreasing = TRUE)
buffer_sizes
paths <- c(path_5000, path_4000, path_3000, path_2000,
path_1000, path_500, path_200, path_100)
paths <- sort(paths,  decreasing = TRUE)
paths
paths <- c(path_5000, path_4000, path_3000, path_2000,
path_1000, path_500, path_200, path_100)
paths
path_100 <- here("data", "adjacent_df_100m_forpermutation.tsv")
path_200 <- here("data", "adjacent_df_200m_forpermutation.tsv")
path_500 <- here("data", "adjacent_df_500m_forpermutation.tsv")
path_1000 <- here("data", "adjacent_df_1000m_forpermutation.tsv")
path_2000 <- here("data", "adjacent_df_2000m_forpermutation.tsv")
path_3000 <- here("data", "adjacent_df_3000m_forpermutation.tsv")
path_4000 <- here("data", "adjacent_df_4000m_forpermutation.tsv")
path_5000 <- here("data", "adjacent_df_5000m_forpermutation.tsv")
get.prop.diff <- function(x){
in_buffer <- sum(x$MINORPOP_intersect_count) / sum(x$ACSTOTPOP_intersect_count)
out_buffer <- sum(x$out_mnr_count) / sum(x$out_pop_count)
return(in_buffer - out_buffer)
}
permutation_test <- function(path, buffer_size){
df <- read_tsv(path)
# df <- na.omit(df[, c("MINORPOP_intersect_count", "ACSTOTPOP_intersect_count",
#                      "out_mnr_count", "out_pop_count")])
actual.value <- get.prop.diff(df)
n.sim <- 2000
results <- tibble(statistic = c(actual.value,
rep(NA,n.sim)))
new.df <- df %>%
select(ACSTOTPOP, MINORPOP,
MINORPOP_intersect_count, ACSTOTPOP_intersect_count,
out_mnr_count, out_pop_count, intersect_prop)
set.seed(42)
for(i in 2:nrow(results)){
new.df$intersect_prop <- sample(new.df$intersect_prop)
# create new counts variables based on the sampled proportion
new.df$ACSTOTPOP_intersect_count <- new.df$intersect_prop*new.df$ACSTOTPOP
new.df$MINORPOP_intersect_count <- new.df$intersect_prop*new.df$MINORPOP
new.df$out_pop_count <- new.df$ACSTOTPOP - new.df$ACSTOTPOP_intersect_count
new.df$out_mnr_count <- new.df$MINORPOP - new.df$MINORPOP_intersect_count
# Calc result statistic
results$statistic[i] <- get.prop.diff(new.df)
}
this_sd <- sd(results$statistic)
max_density <- max(results$statistic, na.rm = TRUE)
pval <- mean(results$statistic > actual.value)
pval_label <- paste0("p-value:\n", round(pval, 3))
act_label <- paste0("act. value:\n", round(actual.value, 3))
plot <- ggplot(results, aes(x=statistic)) +
geom_density() +
geom_vline(xintercept=actual.value,color="red") +
#annotate("text", x=-.1, y=35, label=pval_label, color="red", size=3) + # add the label
#annotate("text", x=.12, y=35, label=act_label, color="red", size=3) + # add the label
#ylim(0, 50) +  # set y limits
xlim(-.3,.3)+
theme_minimal() +
labs(x=NULL, y=paste0(buffer_size,"m"))  # remove x label and add y label
return(plot)
}
permutation_test_multi <- function(paths, buffer_sizes){
plots <- list()
for (i in seq_along(paths)){
plots[[i]] <- permutation_test(paths[i], buffer_sizes[i])
}
# combine the plots using patchwork
plot_combined <- wrap_plots(plots) +
plot_layout(ncol = 1) +
plot_annotation(title = "Density Plots for Multiple Flare Buffers")
return(plot_combined)
}
buffer_sizes <- c(100,200, 500, 1000, 2000, 3000, 4000, 5000)
buffer_sizes <- sort(buffer_sizes, decreasing = TRUE)
buffer_sizes
paths <- c(path_5000, path_4000, path_3000, path_2000,
path_1000, path_500, path_200, path_100)
paths
permutation_test_multi(paths, buffer_sizes)
df <- read_tsv(path_100)
get.prop.diff(df)
df <- read_tsv(path_200)
get.prop.diff(df)
df <- read_tsv(path_500)
get.prop.diff(df)
path_1500 <- here("data", "adjacent_df_1500m_forpermutation.tsv")
buffer_sizes <- c(100,200, 500, 1000, 1500, 2000, 3000, 4000, 5000)
buffer_sizes <- sort(buffer_sizes, decreasing = TRUE)
buffer_sizes
paths <- c(path_5000, path_4000, path_3000, path_2000, path_1500,
path_1000, path_500, path_200, path_100)
paths
permutation_test_multi(paths, buffer_sizes)
options(scipen=999) # force full notation not scientific
library(tidyverse)
library(here)
library(ggplot2)
library(patchwork)
path_100 <- here("data", "adjacent_df_100m_forpermutation.tsv")
path_200 <- here("data", "adjacent_df_200m_forpermutation.tsv")
path_500 <- here("data", "adjacent_df_500m_forpermutation.tsv")
path_1000 <- here("data", "adjacent_df_1000m_forpermutation.tsv")
path_1500 <- here("data", "adjacent_df_1500m_forpermutation.tsv")
path_2000 <- here("data", "adjacent_df_2000m_forpermutation.tsv")
path_3000 <- here("data", "adjacent_df_3000m_forpermutation.tsv")
path_4000 <- here("data", "adjacent_df_4000m_forpermutation.tsv")
path_5000 <- here("data", "adjacent_df_5000m_forpermutation.tsv")
get.prop.diff <- function(x){
in_buffer <- sum(x$MINORPOP_intersect_count) / sum(x$ACSTOTPOP_intersect_count)
out_buffer <- sum(x$out_mnr_count) / sum(x$out_pop_count)
return(in_buffer - out_buffer)
}
permutation_test <- function(path, buffer_size){
df <- read_tsv(path)
# df <- na.omit(df[, c("MINORPOP_intersect_count", "ACSTOTPOP_intersect_count",
#                      "out_mnr_count", "out_pop_count")])
actual.value <- get.prop.diff(df)
n.sim <- 2000
results <- tibble(statistic = c(actual.value,
rep(NA,n.sim)))
new.df <- df %>%
select(ACSTOTPOP, MINORPOP,
MINORPOP_intersect_count, ACSTOTPOP_intersect_count,
out_mnr_count, out_pop_count, intersect_prop)
set.seed(42)
for(i in 2:nrow(results)){
new.df$intersect_prop <- sample(new.df$intersect_prop)
# create new counts variables based on the sampled proportion
new.df$ACSTOTPOP_intersect_count <- new.df$intersect_prop*new.df$ACSTOTPOP
new.df$MINORPOP_intersect_count <- new.df$intersect_prop*new.df$MINORPOP
new.df$out_pop_count <- new.df$ACSTOTPOP - new.df$ACSTOTPOP_intersect_count
new.df$out_mnr_count <- new.df$MINORPOP - new.df$MINORPOP_intersect_count
# Calc result statistic
results$statistic[i] <- get.prop.diff(new.df)
}
this_sd <- sd(results$statistic)
max_density <- max(results$statistic, na.rm = TRUE)
pval <- mean(results$statistic > actual.value)
pval_label <- paste0("p-value:\n", round(pval, 3))
act_label <- paste0("act. value:\n", round(actual.value, 3))
plot <- ggplot(results, aes(x=statistic)) +
geom_density() +
geom_vline(xintercept=actual.value,color="red") +
#annotate("text", x=-.1, y=35, label=pval_label, color="red", size=3) + # add the label
#annotate("text", x=.12, y=35, label=act_label, color="red", size=3) + # add the label
#ylim(0, 50) +  # set y limits
xlim(-.3,.3)+
theme_minimal() +
labs(x=NULL, y=paste0(buffer_size,"m"))  # remove x label and add y label
return(plot)
}
permutation_test_multi <- function(paths, buffer_sizes){
plots <- list()
for (i in seq_along(paths)){
plots[[i]] <- permutation_test(paths[i], buffer_sizes[i])
}
# combine the plots using patchwork
plot_combined <- wrap_plots(plots) +
plot_layout(ncol = 1) +
plot_annotation(title = "Density Plots for Multiple Flare Buffers")
return(plot_combined)
}
buffer_sizes <- c(100,200, 500, 1000, 1500, 2000, 3000, 4000, 5000)
buffer_sizes <- sort(buffer_sizes, decreasing = TRUE)
buffer_sizes
paths <- c(path_5000, path_4000, path_3000, path_2000, path_1500,
path_1000, path_500, path_200, path_100)
paths
permutation_test_multi(paths, buffer_sizes)
